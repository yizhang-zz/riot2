#include "common.h"
#include "vector.h"
#include <jni.h>
#incldue <stdlib.h>
int varid = 0;
char *globaldir = "/export/home/yizhang";
  JavaVM *jvm;
  JNIEnv *env;

int init()
{
  JavaVMOption options[2];
  JavaVMInitArgs vm_args;
  long status;

  options[0].optionString = "-Djava.class.path=.";
  memset(&vm_args, 0, sizeof(vm_args));
  vm_args.version = JNI_VERSION_1_2;
  vm_args.nOptions = 1;
  vm_args.options = options;

  status = JNI_CreateJavaVM(&jvm, (void**) &env, &vm_args);
  if (status == JNI_ERR)
    {
      printf("Error creating VM\n");
      return 1;
    }
  return 0;
}

int  destroy()
{
  (*jvm)->DestroyJavaVM(jvm);
  return 0;
}


SEXP createRiotVector(SEXP x)
{
  SEXP ans, info;
  PROTECT(ans = R_do_new_object(R_getClassDef("riotvector")));
  
  switch(TYPEOF(x))
	{
	case INTSXP:
	  PROTECT(info = allocVector(RAWSXP,sizeof(Vector)));
	  Vector *vec = (Vector*)RAW(info);
	  vec->init((lsize_t)length(x), INTEGER(x), (lsize_t)length(x));

	  break;
	case REALSXP:
	  PROTECT(info = allocVector(RAWSXP,sizeof(Vector)));
	  //Vector<double> *vec1 = (Vector<double>*)RAW(info);
	  //*vec1 = Vector<double>(length(x), REAL(x), length(x));
	  break;
	default:
	  break;
	}
  R_do_slot_assign(ans, install("info"), info);
  UNPROTECT(2);
  return ans;
}


  SEXP showRiotVector(SEXP x)
  {
	static char* types[26] = {0,0,0,0,0,0,0,0,0,0,"logical",0,0,"integer","real","complex"};

	SEXP ans;
	//Vector<void> *vec = (Vector<void>*)RAW(R_do_slot(x,install("info")));
	//Rprintf("Type:\t%s\n", types[vec->type]);
	//Rprintf("Length:\t%lld\n", vec->size);
	//Rprintf("Storage:\t%s\n", vec->file);
	return R_NilValue;
  }

}
